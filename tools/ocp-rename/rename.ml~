
let _ =
  let subst = StringSubst.empty_subst () in
  let remove_string new_string old_string =
    StringSubst.add_to_subst subst old_string new_string
  in
  let not_fake = ref true in
  let forced = ref false in
  let arg1 = ref "" in
  let arg2 = ref "" in
  let arg_list = [
    "-k", Arg.Clear not_fake, " Only print what would be done";
    "-f", Arg.Set forced, "  Erase targets if necessary";
    "-e", Arg.String (remove_string ""), "STRING Remove STRING from filenames";
    "-s", Arg.Tuple [Arg.String ( (:=) arg1);
                     Arg.String ( (:=) arg2);
                     Arg.Unit (fun () ->
                         remove_string !arg2 !arg1
                       ) ], "OLD NEW Replace OLD by NEW";
  ] in

  let rename dirname basename =
    let (nocc, new_basename) = StringSubst.iter_subst subst basename in
    if new_basename <> basename then begin
      let old_filename = Filename.concat dirname basename in
      let new_filename = Filename.concat dirname new_basename in
      let do_it =
        if Sys.file_exists new_filename then begin
          Printf.eprintf
            "Warning: target already exists:\n  old:%s\n  new:%s\n%!"
            old_filename new_filename;
          !forced
        end else true
      in
      if do_it then begin
        Printf.eprintf "mv %s %s\n%!" old_filename new_filename;
        if !not_fake then begin
          Sys.rename old_filename new_filename
        end
      end
    end
  in

  let rec arg_anon dirname =
    let files = Sys.readdir dirname in
    Array.iter (fun basename ->
        let filename = Filename.concat dirname basename in
        if Sys.is_directory filename then arg_anon filename
        else
          rename dirname basename
      ) files
  in
  let arg_usage = "ocp-rename [OPTIONS] DIRS" in
  Arg.parse arg_list arg_anon arg_usage
